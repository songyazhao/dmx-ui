<template>
  <view class="dmx-checkbox-group">
    <label class="dmx-checkbox-group-title">{{title}}</label>
    <view class="dmx-checkbox-group-items">
      <dmx-checkbox
        wx:for="{{options}}"
        wx:key="index"
        class="dmx-checkbox-group-item"
        size="large"
        val="{{item.value}}"
        wx:model="{{ checkeds[index] }}"
        bind:change="handleChange">
        {{item.label}}
      </dmx-checkbox>
    </view>
  </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'

createComponent({
  externalClasses: ['dmx-checkbox-group'],

  properties: {
    // - 模式：`single`(单选) | `multiple`(多选)
    mode: {
      type: String,
      value: 'multiple'
    },
    // - 标题
    title: {
      type: String,
      value: ''
    },
    // - 选项
    options: {
      type: Array,
      value: []
    },
    // - 默认选中的值
    value: {
      type: Array,
      value: []
    },
    // - 至少选中几个, 默认1
    min: {
      type: [Number, String],
      value: 1
    },
    // - 至多选中几个, 默认-1表示不限
    max: {
      type: [Number, String],
      value: -1
    }
  },

  watch: {
    value (val) {
      this.cacheValue = val
      this.checkeds = new Array(this.options.length).fill(false)
      this.options.forEach((x, i) => {
        this.checkeds[i] = val.includes(x.value)
      })
    }
  },

  data: {
    checkeds: [],
    cacheValue: []
  },

  computed: {
    __isSingle () {
      return this.mode === 'single'
    }
  },

  created () {
    this.checkeds = new Array(this.options.length).fill(false)
    this.options.forEach((x, i) => {
      if (this.value.includes(x.value)) {
        this.checkeds[i] = true
        this.cacheValue.push(x.value)
      }
    })
  },

  methods: {
    handleChange ({ detail: { checked, value } }) {
      const index = this.options.findIndex(x => x.value === value)
      const checkedsLength = this.checkeds.filter(x => x).length
      let cacheValue = this.cacheValue
      if (!checked && (checkedsLength - 1) < this.min) return

      if (this.__isSingle) { // - 单选模式
        cacheValue = [value]
        this.checkeds.fill(false)
      } else { // - 多选
        if (this.max !== -1 && checked && (checkedsLength + 1) > this.max) return

        if (checked && !cacheValue.includes(value)) {
          cacheValue.push(value)
        }
        if (!checked && cacheValue.includes(value)) {
          cacheValue = cacheValue.filter(x => x !== value)
        }
      }

      this.checkeds[index] = checked

      const originValue = this.options.filter(x => cacheValue.includes(x.value))
      this.triggerEvent('input', { value: cacheValue }) // - Mpx双向绑定
      this.triggerEvent('change', { value: cacheValue, originValue })
    }
  }
})
</script>

<style lang="stylus">
.dmx-checkbox-group
  margin-top 4px
  padding-left 12px
  &-title
    display block
    padding 12px 0
    color #808080
  // &-items
  &-item
    margin-bottom 12px
    margin-right 12px
</style>

<script type="application/json">
  {
    "component": true,
    "usingComponents": {
      "dmx-checkbox": "./dmx-checkbox"
    }
  }
</script>
