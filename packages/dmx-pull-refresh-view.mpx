<template>
  <view id="pulltorefresh" class="dmx-pulltorefresh-view">
    <movable-area class="dmx-pulltorefresh-area">
      <movable-view
        id="pulltorefresh-container"
        class="dmx-pulltorefresh-view-container"
        out-of-bounds="{{true}}"
        y="{{-offsetY}}"
        direction="vertical"
        bindtouchend="touchend"
        bindchange="bindChange">
        <view class="header">
          <view class="header-text" wx:if="{{pullDownStatus === 0 && !disablePullDown}}">
            {{pullText}}
          </view>
          <view class="header-text" wx:if="{{pullDownStatus === 1 && !disablePullDown}}">
            {{releaseText}}
          </view>
          <view class="header-text" wx:if="{{pullDownStatus === 2 && !disablePullDown}}">
            <dmx-icon name="loading"></dmx-icon>{{loadingText}}
          </view>
          <view class="header-text" wx:if="{{pullDownStatus === 3 && !disablePullDown}}">
            {{finishText}}
          </view>
        </view>
        <scroll-view
        class="body"
        scroll-y
        scroll-with-animation
        scroll-top="{{scrollTop}}"
        bindscroll="handleScroll"
        bindscrolltolower="bindLoadMore">
          <slot></slot>
        </scroll-view>
      </movable-view>
    </movable-area>
  </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'

createComponent({
  properties: {
    pullText: {
      type: String,
      value: '下拉可以刷新',
    },
    releaseText: {
      type: String,
      value: '松开立即刷新',
    },
    loadingText: {
      type: String,
      value: '正在刷新数据中',
    },
    finishText: {
      type: String,
      value: '刷新完成',
    },
    pullUpText: {
      type: String,
      value: '上拉加载更多',
    },
    pullUpReleaseText: {
      type: String,
      value: '松开立即加载',
    },
    loadmoreText: {
      type: String,
      value: '正在加载更多数据',
    },
    loadmoreFinishText: {
      type: String,
      value: '加载完成',
    },
    nomoreText: {
      type: String,
      value: '已经全部加载完毕',
    },
    refreshing: {
      type: Boolean,
      value: false,
      observer: 'refreshingChange',
    },
    nomore: {
      type: Boolean,
      value: false,
    },
    disablePullDown: {
      type: Boolean,
      value: false,
    },
    disablePullUp: {
      type: Boolean,
      value: false,
    },
  },
  data: {
    pullDownStatus: 0,
    pullUpStatus: 0,
    offsetY: 40,
    isOutBound: false,
    eventName: '',
    scrollTop: 0,
    cacheScrollTop: 0
  },
  methods: {
    scrollToBottom () {
      const query = this.createSelectorQuery()
      query.select('#pulltorefresh-container').boundingClientRect()
      query.exec(res => {
        const innerHeight = res[0].height
        query.select('#pulltorefresh').boundingClientRect()
        query.exec(res => {
          const outerHeight = res[0].height
          this.pullUpStatus = 3
          this.offsetY = -(innerHeight - outerHeight - 40)
          setTimeout(() => this.pullUpStatus = 0, 500)
        })
      })
    },
    handleScroll (evt) {
      this.triggerEvent('scroll', evt.detail)
    },
    bindLoadMore (evt) {
      this.triggerEvent('scrolltolower', evt.detail)
    },
    touchend (e) {
      if (this.isOutBound && this.offsetY > 40 && !this.disablePullDown) {
        this.pullDownStatus = 2
        this.eventName = 'pulldownrefresh'
        this.triggerEvent('pulldownrefresh')
      } else if (this.isOutBound && this.offsetY < 40 && !this.disablePullUp) {
        if (this.nomore) {
          this.scrollToBottom()
        } else {
          this.pullUpStatus = 2
          this.eventName = 'loadmore'
          this.triggerEvent('loadmore')
        }
      } else {
        this.offsetY = 40
        this.pullDownStatus = 0
      }
      setTimeout(() => {
        this.offsetY = 40
        this.pullDownStatus = 0
      }, 1000)
    },
    bindChange (e) {
      if (this.refreshing) return
      this.isOutBound = e.detail.source === 'touch-out-of-bounds'
      const offsetY = e.detail.y + 40
      if (this.isOutBound) {
        if (offsetY > 40) {
          this.pullDownStatus = 1
        } else {
          this.pullUpStatus = 1
        }
      } else if ((this.pullDownStatus !== 0 && this.pullDownStatus !== 3) || (this.pullUpStatus !== 0 && this.pullUpStatus !== 3)) {
        setTimeout(() => {
          this.pullDownStatus = 0
          this.pullUpStatus = 0
        }, 1000)
      }
      if (this.isOutBound && offsetY > 40 && this.pullDownStatus === 0) {
        this.pullDownStatus = 1
      } else if (offsetY <= 40 && this.pullDownStatus === 1) {
        this.pullDownStatus = 0
      }
    },
    reSetScrollTop () {
      this.scrollTop = 0
      this.offsetY = 40
      this.pullDownStatus = 0
    },
    refreshingChange (newVal, oldVal) {
      if (oldVal === true && newVal === false) {
        if (this.eventName === 'pulldownrefresh') {
          this.offsetY = 40
          this.pullDownStatus = 3
          setTimeout(() => this.pullDownStatus = 0, 500)
        } else if (this.eventName === 'loadmore') {
          this.scrollToBottom()
        }
      }
    },
  },
})
</script>
<style lang="stylus">
.dmx-pulltorefresh-area
  height 100%
  width 100%
  .dmx-pulltorefresh-view-container
    height calc(100% + 80px)
    width 100%
.dmx-pulltorefresh-view
  height 100%
  width 100%
  display flex
  flex-direction column
  align-items center
  justify-content center
  .header
    height 40px
  .header-text
    height 40px
    margin 0px auto
    line-height 40px
    text-align center
  .body
    height calc(100% - 80px)
  .loadmore
    height 40px
    view
      height 40px
      margin 0px auto
      line-height 40px
      text-align center
</style>

<script type="application/json">
  {
    "component": true,
    "usingComponent": {
      "dmx-icon": "./dmx-icon"
    }
  }
</script>
